import pandas as pd
import numpy as np
from sklearn.model_selection import cross_validate
from sklearn.ensemble import RandomForestClassifier

def cross_validation(model, _X, _y, _cv=10):
      '''Function to perform 10 Folds Cross-Validation
       
       Function returns the mean test_f1_score
      '''
      _scoring = ['accuracy','recall','precision' ,'f1']
      results = cross_validate(estimator=model,
                               X=_X,
                               y=_y,
                               cv=_cv,
                               scoring=_scoring,
                               return_train_score = True)
      print("Mean Validation Accuracy", round(results['test_accuracy'].mean()*100,3), "%")
      print("Mean Validation Recall",round(results['test_recall'].mean()*100,3), "%")
      print ("Mean Validation Precision:", round (results['test_precision'].mean()*100,3),"%")
      print ("Mean Validation F1-score", round(results['test_f1'].mean()*100,3),"%")
    

df = pd.read_csv("b_depressed.csv")
df['no_lasting_investment'].fillna(df['no_lasting_investment'].median(), inplace=True)
df.no_lasting_investment.isnull().sum()

dfDrop = df.drop(['Survey_id', 'Ville_id'], axis=1)
feature_names = list(dfDrop.columns)
feature_names = feature_names[:-1]

#get the data into df for features and another for class labels (0- not depressed or 1)
X_db = dfDrop.iloc[:, :-1].values
y_db = dfDrop.iloc[:, -1].values

print("Starting machine learning algorithm ...")
e = 50
criterion = 'entropy'
max_depth = 20
max_features = 'sqrt'
class_weight = 'balanced_subsample'

RF_clf = RandomForestClassifier(n_estimators=e, criterion=criterion, max_depth=max_depth, max_features=max_features)
# this is the number of decision trees that will be generated by Random Forest. The sample of the ensemble method used before
rf_result = cross_validation(RF_clf, X_db, y_db, 10)

#print baseline score
print(rf_result)
